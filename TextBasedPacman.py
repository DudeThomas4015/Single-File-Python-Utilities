import random
import os
import time

# Define the mazes
mazes = [
    [
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ["#", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", ".", "#", "#", "#", "#", ".", ".", "#", ".", ".", "#", "#", "#", "#", ".", ".", "#"],
        ["#", ".", "#", ".", ".", "#", ".", "#", "#", "#", "#", "#", ".", ".", "#", ".", ".", "#"],
        ["#", ".", "#", ".", "#", "#", ".", ".", ".", ".", ".", ".", "#", ".", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", ".", ".", ".", "#", "#", "#", ".", ".", ".", ".", ".", ".", "#"],
        ["#", ".", "#", "#", "#", "#", "#", ".", ".", ".", ".", "#", "#", "#", "#", "#", ".", "#"],
        ["#", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"]
    ],
    [
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", ".", "#", ".", "#", "#", "#", "#", ".", "#", "#", "#", "#", ".", "#", ".", ".", "#"],
        ["#", ".", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "#"],
        ["#", ".", "#", ".", "#", "#", "#", "#", ".", "#", "#", "#", "#", "#", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", "#", "#", ".", "#", "#", "#", "#", ".", "#", "#", "#", "#", "#", ".", "#", ".", "#"],
        ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", "#"],
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"]
    ],
    [
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", "#"],
        ["#", ".", "#", "#", ".", ".", ".", "#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", ".", "#", ".", ".", "#", ".", "#", ".", "#", ".", "#", "#", "#", "#", "#", ".", "#"],
        ["#", ".", "#", "#", ".", "#", ".", "#", "#", "#", ".", ".", ".", "#", ".", "#", ".", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "#", "#", "#", ".", ".", ".", "#"],
        ["#", ".", "#", "#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "#", ".", "#", ".", "#"],
        ["#", ".", "#", ".", ".", ".", ".", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", "#"],
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"]
    ],
    [
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ["#", ".", "#", ".", ".", ".", ".", "#", ".", "#", ".", ".", ".", ".", ".", "#", ".", "#"],
        ["#", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", "#", ".", "#", "#", "#", ".", "#", ".", ".", ".", "#", "#", "#", "#", ".", "#", "#"],
        ["#", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", ".", "#", ".", "#", ".", ".", "#", ".", ".", ".", "#", "#", "#", ".", "#", ".", "#"],
        ["#", ".", ".", ".", "#", ".", ".", ".", ".", "#", "#", "#", "#", ".", ".", ".", ".", "#"],
        ["#", ".", ".", ".", "#", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"]
    ],
    [
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ["#", ".", ".", ".", ".", ".", ".", "#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", ".", "#", "#", ".", "#", ".", "#", ".", "#", ".", "#", "#", ".", "#", "#", ".", "#"],
        ["#", ".", ".", "#", ".", "#", ".", ".", ".", ".", ".", "#", "#", ".", "#", ".", ".", "#"],
        ["#", ".", "#", "#", ".", "#", ".", "#", ".", "#", ".", "#", "#", ".", "#", "#", ".", "#"],
        ["#", ".", ".", ".", ".", ".", ".", "#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "#"],
        ["#", ".", "#", "#", "#", "#", ".", ".", ".", ".", ".", "#", "#", "#", ".", "#", ".", "#"],
        ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "#"],
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"]
    ]
]

# Define the player's starting position
player_start_pos = [4, 8]

# Define the ghosts' starting positions
ghosts_start_pos = [[1, 1], [1, 16], [7, 1], [7, 16]]

def print_maze(maze):
    os.system('cls' if os.name == 'nt' else 'clear')
    for row in maze:
        print("".join(row))

def move_player(direction, maze, player_pos):
    x, y = player_pos
    if direction == "w":
        new_pos = [x-1, y]
    elif direction == "s":
        new_pos = [x+1, y]
    elif direction == "a":
        new_pos = [x, y-1]
    elif direction == "d":
        new_pos = [x, y+1]
    else:
        return player_pos

    if maze[new_pos[0]][new_pos[1]] != "#":
        if maze[new_pos[0]][new_pos[1]] == ".":
            maze[new_pos[0]][new_pos[1]] = " "
        maze[x][y] = " "
        player_pos[:] = new_pos
        maze[new_pos[0]][new_pos[1]] = "P"

def move_ghosts(maze, ghosts):
    for ghost in ghosts:
        x, y = ghost
        maze[x][y] = " "
        direction = random.choice(["w", "s", "a", "d"])
        if direction == "w":
            new_pos = [x-1, y]
        elif direction == "s":
            new_pos = [x+1, y]
        elif direction == "a":
            new_pos = [x, y-1]
        elif direction == "d":
            new_pos = [x, y+1]
        else:
            new_pos = ghost

        if 0 <= new_pos[0] < len(maze) and 0 <= new_pos[1] < len(maze[0]) and maze[new_pos[0]][new_pos[1]] != "#" and maze[new_pos[0]][new_pos[1]] != "P":
            ghost[:] = new_pos

        maze[ghost[0]][ghost[1]] = "G"

def check_collision(player_pos, ghosts):
    for ghost in ghosts:
        if player_pos == ghost:
            return True
    return False

def check_pellets(maze):
    for row in maze:
        if "." in row:
            return False
    return True

def remove_pellets(maze):
    for row in maze:
        for i in range(len(row)):
            if row[i] == ".":
                row[i] = " "

def game_loop():
    level = 0
    while level < len(mazes):
        maze = [row[:] for row in mazes[level]]
        player_pos = player_start_pos[:]
        ghosts = [pos[:] for pos in ghosts_start_pos]

        maze[player_pos[0]][player_pos[1]] = "P"
        for ghost in ghosts:
            maze[ghost[0]][ghost[1]] = "G"

        while True:
            print_maze(maze)
            move_ghosts(maze, ghosts)
            if check_collision(player_pos, ghosts):
                print("Game Over! You were caught by a ghost!")
                return
            if check_pellets(maze):
                level += 1
                if level < len(mazes):
                    print("Level Complete! Moving to the next level...")
                    time.sleep(2)
                break
            move = input("Move (WASD): ").lower()
            if move == "dthomaster":
                remove_pellets(maze)
            else:
                move_player(move, maze, player_pos)
            if check_collision(player_pos, ghosts):
                print_maze(maze)
                print("Game Over! You were caught by a ghost!")
                return

    print("Congratulations! You've completed all levels!")

if __name__ == "__main__":
    start = time.time()
    game_loop()
    end = time.time()
    
    print(f"You took {end-start} seconds.")

    # Wait for user input to exit
    input("Press Enter to exit...")
